const { Telegraf, Markup } = require("telegraf");
const express = require("express");
const multer = require("multer");
const cors = require("cors");
const fs = require("fs");
const e = require("express");
const path = require("path");

const TOKEN = "7745394141:AAHoA22DRl7aW0KU6RJtEHpnLA_F1z3mbsQ";

const ARRAY_GROUPS_KEYS = {
  "–í–¢—Å-241-–í–¢—Å-242-–¢–ú—Å-241": ["–í–¢—Å-241", "–í–¢—Å-242", "–¢–ú—Å-241"],
  "–ú–î—Å-241-–≠–∫—Å-241-–ü–û—Å-241": ["–ú–î—Å-241", "–≠–∫—Å-241", "–ü–û—Å-241"],
  "–í–¢—Å-231-–í–¢—Å-232-–¢–ú—Å-231": ["–í–¢—Å-231", "–í–¢—Å-232", "–¢–ú—Å-231"],
  "–ú–î—Å-231-–≠–∫—Å-231-–ü–û—Å-231": ["–ú–î—Å-231", "–≠–∫—Å-231", "–ü–û—Å-231"],
  "–í–¢—Å-221-–í–¢—Å-222-–í–¢—Å-223": ["–í–¢—Å-221", "–í–¢—Å-222", "–í–¢—Å-223"],
  "–ú–î—Å-221-–≠–∫—Å-221-–ü–û—Å-221": ["–ú–î—Å-221", "–≠–∫—Å-221", "–ü–û—Å-221"],
  "–í–¢—Å-211-–í–¢—Å-212": ["–í–¢—Å-211", "–í–¢—Å-212"],
};

const STORAGE_KEYS = Object.keys(ARRAY_GROUPS_KEYS);
const STORAGE_ITEMS = Object.values(ARRAY_GROUPS_KEYS);

const bot = new Telegraf(TOKEN);

const userState = {};
const userChatIds = new Set();
const scheduleFiles = {};

const kbSchedule = Markup.keyboard(["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]).resize();
const kbCourses = Markup.keyboard([["1", "2"], ["3", "4"], ["–ù–∞–∑–∞–¥"]]).resize();

const kbGroups = {
  1: Markup.keyboard([[STORAGE_ITEMS[0].join(" | "), STORAGE_ITEMS[1].join(" | ")], ["–ù–∞–∑–∞–¥"]]).resize(),
  2: Markup.keyboard([[STORAGE_ITEMS[2].join(" | "), STORAGE_ITEMS[3].join(" | ")], ["–ù–∞–∑–∞–¥"]]).resize(),
  3: Markup.keyboard([[STORAGE_ITEMS[4].join(" | "), STORAGE_ITEMS[5].join(" | ")], ["–ù–∞–∑–∞–¥"]]).resize(),
  4: Markup.keyboard([[STORAGE_ITEMS[6].join(" | ")], ["–ù–∞–∑–∞–¥"]]).resize(),
};

bot.start((ctx) => {
  userChatIds.add(ctx.chat.id);
  userState[ctx.from.id] = "start";

  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç!
–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'
2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞
3. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É`,
    kbSchedule
  );
});

bot.hears("–ü—Ä–∏–≤–µ—Ç", (ctx) => {
  userState[ctx.from.id] = "greeted";
  userChatIds.add(ctx.chat.id);
  ctx.reply("–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", kbSchedule);
});

bot.hears("–ü–æ–∫–∞", (ctx) => {
  userChatIds.add(ctx.chat.id);
  ctx.reply("–ü–æ–∫–∞! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!");
});

bot.hears("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", (ctx) => {
  userChatIds.add(ctx.chat.id);
  userState[ctx.from.id] = "schedule";
  ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞:", kbCourses);
});

bot.hears(["1", "2", "3", "4"], (ctx) => {
  const course = ctx.message.text;
  userChatIds.add(ctx.chat.id);
  userState[ctx.from.id] = "course_number";
  ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", kbGroups[course]);
});

bot.hears("–ù–∞–∑–∞–¥", (ctx) => {
  const state = userState[ctx.from.id];
  userChatIds.add(ctx.chat.id);
  if (state === "group") {
    userState[ctx.from.id] = "schedule";
    ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞:", kbCourses);
  } else {
    userState[ctx.from.id] = "start";
    ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", kbSchedule);
  }
});

const allGroups = STORAGE_ITEMS.map((e) => e.join(" | "));

bot.hears(allGroups, async (ctx) => {
  userState[ctx.from.id] = "group";
  userChatIds.add(ctx.chat.id);

  const groupName = ctx.message.text;
  const key = groupName.split(" | ").join("-");

  const fileData = scheduleFiles[key];

  if (fileData) {
    let filename = fileData.filename;

    if (path.extname(filename).toLowerCase() !== ".pdf") {
      filename += ".pdf";
    }

    await bot.telegram.sendDocument(ctx.chat.id, {
      source: fileData.path,
      filename: filename,
    });
    ctx.reply(`–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:

–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥".`);
  } else {
    ctx.reply("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.");
  }
});

bot.on("text", async (ctx) => {
  const groupName = ctx.message.text.trim();
  userChatIds.add(ctx.chat.id);
  userState[ctx.from.id] = "group";

  // –ù–∞–π–¥—ë–º –∫–ª—é—á, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —ç—Ç–∞ –≥—Ä—É–ø–ø–∞
  const matchedKey = Object.entries(ARRAY_GROUPS_KEYS).find(([key, groupArray]) =>
    groupArray.includes(groupName)
  )?.[0];

  if (!matchedKey) {
    ctx.reply("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ.");
    return;
  }

  const fileData = scheduleFiles[matchedKey];

  if (fileData) {
    let filename = fileData.filename;

    if (path.extname(filename).toLowerCase() !== ".pdf") {
      filename += ".pdf";
    }

    await bot.telegram.sendDocument(ctx.chat.id, {
      source: fileData.path,
      filename: filename,
    });

    ctx.reply(`–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã ${groupName}:

–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥".`);
  } else {
    ctx.reply("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.");
  }
});

// express

const app = express();
const upload = multer({ dest: "uploads/" });
const PORT = 3000;

app.use(cors());

app.post("/upload-pdf", upload.single("file"), async (req, res) => {
  const fileName = req.body.fileName;
  const filePath = req.file.path;

  const key = fileName.replace(".pdf", "");

  scheduleFiles[key] = {
    path: filePath,
    filename: fileName,
  };

  try {
    res.send("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
  } catch (err) {
    console.error(err);
    res.status(500).send("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏");
  }
});

app.post("/upload-pdf-mailing", upload.single("file"), async (req, res) => {
  const fileName = req.body.fileName;
  const filePath = req.file.path;

  const key = fileName.replace(".pdf", "");

  scheduleFiles[key] = {
    path: filePath,
    filename: fileName,
  };

  try {
    res.send("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");

    let filenameRes = fileName;

    if (path.extname(filenameRes).toLowerCase() !== ".pdf") {
      filenameRes += ".pdf";
    }

    for (const chatId of userChatIds) {
      await bot.telegram.sendMessage(
        chatId,
        `üì¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø ${ARRAY_GROUPS_KEYS[key].join(" | ")} –æ–±–Ω–æ–≤–∏–ª–æ—Å—å:`
      );
      await bot.telegram.sendDocument(chatId, {
        source: filePath,
        filename: filenameRes,
      });
    }
  } catch (err) {
    console.error(err);
    res.status(500).send("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏");
  }
});

app.listen(PORT, () => {
  console.log(`HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

bot.launch();
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");
